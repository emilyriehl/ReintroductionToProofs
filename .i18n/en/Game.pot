msgid ""
msgstr "Project-Id-Version: Game v4.22.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-21\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: Game.Levels.ImplicationWorld.L04_ProvingImplication
msgid "Now the goal is to prove `Â«{P}Â»` assuming `Â«{p}Â» : Â«{P}Â»`. Which tactic can be used to supply this proof?"
msgstr ""

#: Game.Levels.ImplicationWorld.L01_ByAssumption
msgid "By Assumption"
msgstr ""

#: Game.Levels.ConjunctionWorld.L07_MoreCompoundImplication
msgid "This proves that `(P â†’ Q â†’ R) â†’ (P âˆ§ Q â†’ R)`. We can now conclude that `P âˆ§ Q â†’ R` and `P â†’ Q â†’ R` are logically equivalent."
msgstr ""

#: Game.Levels.ImplicationWorld.L01_ByAssumption
msgid "An interative theorem prover &mdash; in this case Lean &mdash; helps the user &mdash; this means you &mdash; keep track of the state of a proof. In the `Active Goal` window, Lean keeps track of the `objects` and `assumptions` &mdash; which together define the hypotheses of a mathematical statement &mdash; as well as the `goal` &mdash; meaning the thing we are trying to prove."
msgstr ""

#: Game
msgid "Computer-Verified Proof: a Hands-On Introduction to Interactive Theorem Proving"
msgstr ""

#: Game
msgid "Mathematicians from all over &mdash; most of whom have never met one another &mdash; nevertheless agree to an incredible extent about the natural of the mathematical universe. How did this degree of consensus come about?\n"
"\n"
"Firstly mathematicians have developed a precise formal language which allows them to define new abstract concepts and state their properties in an unambiguous way. A mathematical *proposition* is a well-formed mathematical statement that is either true or false, for instance:\n"
"\n"
"* &ldquo;There are infinitely many prime numbers.&rdquo;\n"
"* &ldquo;Every prime number is even.&rdquo;\n"
"* &ldquo;There are infinitely many prime numbers that are two less than another prime.&rdquo;\n"
"\n"
"Mathematicians distinguish between the true propositions, the false ones, and the ones whose truth value is not yet known through *proofs* made precise in the formal language of mathematical logic. The aim of this game is to introduce these proof techniques using a tool called a computer proof assistant that can provide real-time feedback to a theorem prover about the status of a logical argument that is currently under development."
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! ðŸŽ‰"
msgstr ""

#: Game.Levels.ImplicationWorld.L03_ComposingImplication
msgid "If the goal is to prove `S` and we have a hypothesis `s : S`, the tactic `exact s` supplies the required proof."
msgstr ""

#: Game.Levels.ConjunctionWorld.L07_MoreCompoundImplication
msgid "Since `h` is a compound implication, we have multiple hypothesis to satisfy. We must prove that `P` is true and also prove that `Q` is true. Fortunately, our assumptions cover both cases."
msgstr ""

#: Game.Levels.ConjunctionWorld.L05_Associativity
#: Game.Levels.ConjunctionWorld.L05_Associativity
#: Game.Levels.ConjunctionWorld.L05_Associativity
msgid "What tactics can be used to break a goal involving conjunction into subgoals?"
msgstr ""

#: Game.Levels.ConjunctionWorld.L01_IntroducingAnd
msgid "Introducing And"
msgstr ""

#: Game.Levels.ImplicationWorld.L07_OnParentheses
msgid "On Parentheses"
msgstr ""

#: Game.Levels.ConjunctionWorld.L09_UniversalProperty
#: Game.Levels.ConjunctionWorld.L09_UniversalProperty
msgid "We can apply the proof `Â«{h}Â» : P â†’ Q âˆ§ R` to the proof `Â«{p}Â»: P` to obtain `Â«{h}Â» Â«{p}Â» : Q âˆ§ R`. How can these be used to prove the goal?"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warningsâ€¦ ðŸŽ­"
msgstr ""

#: Game.Levels.ImplicationWorld.L02_ModusPonens
msgid "Now your goal is a proof of `Â«{P}Â»`. Type `exact Â«{p}Â»` to tell Lean that `Â«{p}Â»` is a proof of `Â«{P}Â»`."
msgstr ""

#: Game.Levels.ImplicationWorld.L02_ModusPonens
msgid "Modus Ponens"
msgstr ""

#: Game.Levels.ImplicationWorld.L03_ComposingImplication
msgid "Now we are in the setting of three proposition variables `P`, `Q`, and `R` with several hypotheses. The first assumption provides a proof `p` that the proposition `P` is true. The second provides a proof `h1` that the implication `P â†’ Q` is true. The final hypothesis provides a proof `h2` that `Q â†’ R` is true. Our goal is to conclude that `R` is true.\n"
"\n"
"If you need help, click the button `Show more help!` for reminders/hints."
msgstr ""

#: Game.Levels.ConjunctionWorld
msgid "The logical connective of *conjunction*, denoted by `âˆ§`, is the mathematical version of *and*. For arbitrary propositions `P` and `Q`, `P âˆ§ Q` is a new proposition asserting that `P` *and* `Q` *are both true*.\n"
"\n"
"To understand how conjunctions work in logic we must learn:\n"
"\n"
"* How to prove theorems of the form `P âˆ§ Q`.\n"
"* How to use a hypothesis of the form `P âˆ§ Q` to prove something else.\n"
"\n"
"To prove `P âˆ§ Q`, one must supply proofs `p : P` and `q : Q`, which can be done using the syntax `âŸ¨p,qâŸ© : P âˆ§ Q`. Use '\\\\<' and '\\\\>' to type the angle braces.\n"
"\n"
"If we have a proof `h : P âˆ§ Q` then we can extract proofs that `P` and `Q` are true using the syntax `h.1 : P` and `h.2 : Q`."
msgstr ""

#: Game.Levels.ImplicationWorld.L09_BossLevel
msgid "Multiple hypothesis can be introduced at once by writing `intro h1 h2 h3` etc. You might consider using names that will help you remember which propositions each hypothesis proves!"
msgstr ""

#: Game.Levels.ConjunctionWorld.L10_BossLevel
msgid "Next move on to `Function World` to learn about types and functions."
msgstr ""

#: Game.Levels.ConjunctionWorld.L03_Symmetry
msgid "If `P âˆ§ Q` is true, then `Q âˆ§ P` is too. In other words, `P âˆ§ Q` implies `Q âˆ§ P`, as is expressed by the proposition `P âˆ§ Q â†’ Q âˆ§ P` which is implicitly parenthesized as `(P âˆ§ Q) â†’ (Q âˆ§ P)`."
msgstr ""

#: Game.Levels.ImplicationWorld.L04_ProvingImplication
msgid "To prove an implication `P â†’ Q` one needs to give a construction of a proof of `Q` from a proof of `P`. In particular, to prove that `P â†’ Q` it suffices to assume that we have a proof `p : P` --- even if `P` is false and such a proof does not exist --- in which case the new goal is to find a proof of `Q`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L05_Associativity
msgid "For propositions `P`, `Q`, and `R`, `(P âˆ§ Q) âˆ§ R` is true if and only if `P âˆ§ (Q âˆ§ R)` is true.\n"
"\n"
"Lean likes to drop parentheses whenever possible so uses `P âˆ§ Q âˆ§ R` as an abbreviation for `P âˆ§ (Q âˆ§ R)`. While it's difficult to remember this convention, at least the two possible statements are logically equivalent!\n"
"\n"
"Given a proof `h : (P âˆ§ Q) âˆ§ R`, we obtain proofs `h.1 : P âˆ§ Q` and `h.2 : R`. From the first of these,\n"
"we obtain further proofs `h.1.1 : P` and `h.1.2 : Q`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L01_IntroducingAnd
msgid "To prove a conjunction `P âˆ§ Q` we need to supply a proof of both `P` and `Q`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
msgid "For propositions `P`, `Q`, and `R`, `And.curry` is a proof that `P âˆ§ Q â†’ R` implies `P â†’ Q â†’ R`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L01_IntroducingAnd
msgid "The `constructor` tactic can be used when the goal is a conjunction (among other settings to be introduced later) to split the goal into cases."
msgstr ""

#: Game.Levels.ImplicationWorld.L08_ModusPonensAgain
msgid "Modus Ponens Again"
msgstr ""

#: Game.Levels.ConjunctionWorld.L03_Symmetry
#: Game.Levels.ConjunctionWorld.L03_Symmetry
msgid "Note the goal window in the interactive theorem prover keeps track of exactly what proposition you are trying to prove."
msgstr ""

#: Game.Levels.ImplicationWorld.L03_ComposingImplication
#: Game.Levels.ImplicationWorld.L03_ComposingImplication
msgid "In the presence of a hypothesis `h : S â†’ T`, the tactic `apply h` reduces the problem of proving `T` to the problem of proving `S`. Can this be used here?"
msgstr ""

#: Game.Levels.ImplicationWorld.L04_ProvingImplication
msgid "Proving Implication"
msgstr ""

#: Game.Levels.ImplicationWorld.L02_ModusPonens
msgid "Now we are in the setting of two proposition variables `P` and `Q` with two hypotheses. The first assumption provides a proof `p` that the proposition `P` is true. The second provides a proof `h` that the implication `P â†’ Q` is true."
msgstr ""

#: Game.Levels.ConjunctionWorld.L08_CurryingImplication
msgid "What is the outermost logical connective? What tactic is used to prove statements of this form?"
msgstr ""

#: Game.Levels.ConjunctionWorld.L04_LogicalEquivalence
msgid "Recall that `S â†” T` is an abbreviation for `(S â†’ T) âˆ§ (T â†’ S)`. What is the outermost connective here? Which tactic can be used to break this into subgoals?"
msgstr ""

#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
msgid "Now how do we prove a conjunction?"
msgstr ""

#: Game.Levels.ImplicationWorld.L02_ModusPonens
msgid "The hypothesis `Â«{h}Â»` can be used to convert a proof of `Â«{P}Â»` into a proof of `Â«{Q}Â»`. This can be thought of as a step that reduces the problem of proving `Â«{Q}Â»` to the problem of proving `Â«{P}Â»`. To apply this hypothesis type `apply Â«{h}Â»`."
msgstr ""

#: Game.Levels.ImplicationWorld.L05_ProvingAssumption
msgid "Now the goal is to prove `Â«{P}Â»` using *any* of our given hypotheses. Which tactic can be used to supply this proof?"
msgstr ""

#: Game.Levels.ConjunctionWorld.L02_UsingAnd
msgid "This can be solved in two ways. Can you find them both?"
msgstr ""

#: Game.Levels.ImplicationWorld.L06_ProvingAssumedImplication
msgid "Proving Assumed Implication"
msgstr ""

#: Game.Levels.ConjunctionWorld.L05_Associativity
msgid "Transition here."
msgstr ""

#: Game.Levels.ConjunctionWorld.L08_CurryingImplication
msgid "We now establish a logical equivalence between `P âˆ§ Q â†’ R` and `P â†’ Q â†’ R`.\n"
"\n"
"This is why implications of the form `P â†’ (Q â†’ R)` are so much more common than implications of the form `(P â†’ Q) â†’ R`.\n"
"\n"
"The name `Currying` will be explained in a future level."
msgstr ""

#: Game.Levels.ConjunctionWorld.L07_MoreCompoundImplication
msgid "In the previous level we proved that `P âˆ§ Q â†’ R` implies `P â†’ Q â†’ R`.\n"
"\n"
"We now show that `(P â†’ Q â†’ R)` implies `P âˆ§ Q â†’ R`."
msgstr ""

#: Game.Levels.ImplicationWorld.L05_ProvingAssumption
msgid "To prove an implication `S â†’ T` one needs to give a construction of a proof of `T` from a proof of `S`. As we will see in the following example, it is not necessary to actually *use* the assumption that `S` is true after introducing it."
msgstr ""

#: Game.Levels.ImplicationWorld.L09_BossLevel
msgid "Next move on to Conjunction World to meet our second logical connective."
msgstr ""

#: Game.Levels.ImplicationWorld.L05_ProvingAssumption
msgid "To prove an implication, which in this case has the form `Â«{Q}Â» â†’ Â«{P}Â»`, type `intro q` to introduce an assumption `q : Â«{Q}Â»` --- assuming the first proposition is true --- and update the goal to `Â«{P}Â»` --- asking for a proof that the second proposition is true using this new assumption.\n"
"\n"
"It is also possible to type simply `intro` in which case Lean will automatically generate a name for the proof of `Â«{Q}Â»`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L02_UsingAnd
msgid "A hypothesis `h : P âˆ§ Q` provides explicit proofs of both `P` and `Q` which are denoted by `h.1 : P` and `h.2 : Q`."
msgstr ""

#: Game
msgid "This was created using the GameSkeleton Github Repo from the Lean Games Server hosted by ADAM: Anticipating the Digital Age of Mathematics at Heinrich Heine University DÃ¼sseldorf."
msgstr ""

#: Game.Levels.ImplicationWorld
msgid "Implication World"
msgstr ""

#: Game.Levels.ConjunctionWorld.L07_MoreCompoundImplication
msgid "For propositions `P`, `Q`, and `R`, `And.uncurry` is a proof that `P â†’ Q â†’ R` implies `P âˆ§ Q â†’ R`."
msgstr ""

#: Game.Levels.ImplicationWorld.L03_ComposingImplication
msgid "Composing Implication"
msgstr ""

#: Game.Levels.ImplicationWorld.L07_OnParentheses
msgid "For propositions `P`, `Q`, and `R`, the propositions `(P â†’ Q) â†’ R` and `P â†’ (Q â†’ R)` are not the same. The first asserts that `R` is true assuming `P â†’ Q`. The second asserts that `Q â†’ R` is true assuming `P`, or equivalently, that `R` is true assuming `P` and also assuming `Q`.\n"
"\n"
"Mathematical statements of this second form `P â†’ (Q â†’ R)` are much more common. Thus the shorthand `P â†’ Q â†’ R` implicitly refers to `P â†’ (Q â†’ R)`, not to the other parenthesization. More generally, `P â†’ Q â†’ R â†’ S â†’ T` refers to `P â†’ (Q â†’ (R â†’ (S â†’ T)))`. Explicit parentheses must be used to express statements with any other parenthesizations."
msgstr ""

#: Game.Levels.ConjunctionWorld.L05_Associativity
msgid "Think carefully about what `Â«{k}Â»` proves and what proofs can be extracted from this."
msgstr ""

#: Game.Levels.ConjunctionWorld.L09_UniversalProperty
msgid "Now we are ready for the boss level."
msgstr ""

#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
msgid "This proves that `(P âˆ§ Q â†’ R) â†’ (P â†’ Q â†’ R)`. We will now investigate the converse implication."
msgstr ""

#: Game.Levels.ImplicationWorld.L08_ModusPonensAgain
msgid "Now we are ready for the boss level!"
msgstr ""

#: Game.Levels.ConjunctionWorld.L08_CurryingImplication
msgid "Currying Implication"
msgstr ""

#: Game.Levels.ConjunctionWorld.L10_BossLevel
msgid "For the Boss Level of Conjunction World, the task is to show another logical equivalence,\n"
"this time between the conjoined implications `(P â†’ Q) âˆ§ (P â†’ R)` and the implication `P â†’ Q âˆ§ R`.\n"
"\n"
"The proof will require a new idea, which previews the next level. We've seen that for propositions `S` and `T`,\n"
"`S â†’ (S â†’ T) â†’ T` can be proven by introducing hypotheses `s : S` and `h : S â†’ T`, at which point the goal is to prove `T`.\n"
"Then applying the hypothesis `h` reduces the goal to proving `S` which we know is true by `s`. In fact, the element\n"
"`h s : T` is a proof of `T`, namely the proof constructed by applying the hypothesis `h` to the hypothesis `s`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L05_Associativity
msgid "Associativity"
msgstr ""

#: Game.Levels.ConjunctionWorld.L05_Associativity
#: Game.Levels.ConjunctionWorld.L05_Associativity
msgid "Note the `.1` and `.2` notation can be iterated."
msgstr ""

#: Game.Levels.ConjunctionWorld.L01_IntroducingAnd
msgid "Now Lean reminds you of the other goal, which is to prove `Q`. Which tactic applies here?"
msgstr ""

#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
msgid "Recall that implication is *NOT* associative: the propositions `(P â†’ Q) â†’ R` and `P â†’ (Q â†’ R)` are not logically equivalent, and `P â†’ Q â†’ R` is an abbreviation for the former.\n"
"\n"
"One reason that mathematical statements of the form `P â†’ (Q â†’ R)` are more prevalent is that this is implied by `P âˆ§ Q â†’ R`, which is implicitly parenthesized as `(P âˆ§ Q) â†’ R`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
msgid "Can we apply our hypothesis now?"
msgstr ""

#: Game.Levels.ImplicationWorld.L01_ByAssumption
msgid "Assuming the proposition `P` is true, prove `P`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L08_CurryingImplication
msgid "In the next level we'll meet the universal property of conjunctions."
msgstr ""

#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
msgid "Compound Implication"
msgstr ""

#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
#: Game.Levels.ConjunctionWorld.L06_CompoundImplication
#: Game.Levels.ConjunctionWorld.L07_MoreCompoundImplication
#: Game.Levels.ConjunctionWorld.L07_MoreCompoundImplication
msgid "Can we apply our hypothesis yet or must we act on the goal first?"
msgstr ""

#: Game.Levels.ImplicationWorld.L04_ProvingImplication
msgid "When the goal has the form `Â«{P}Â» â†’ Â«{P}Â»`, type `intro p` to introduce an assumption `p : Â«{P}Â»` --- assuming the first proposition is true --- and update the goal to `Â«{P}Â»` --- asking for a proof that the second proposition is true using this new assumption.\n"
"\n"
"It is also possible to type simply `intro` in which case Lean will automatically generate a name for the proof of `Â«{P}Â»`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L04_LogicalEquivalence
msgid "Did you give the same proof twice? If so, why does this make sense? If not, could you have done this? In fact, we gave a name `And.symm` to the proof given in the previous level, as you can see in the list of theorems to the right. Try typing `exact And.symm` at an appropriate place in your proof."
msgstr ""

#: Game.Levels.ConjunctionWorld.L04_LogicalEquivalence
msgid "`P â†” Q`, read as &ldquo;`P` if and only if `Q`&rdquo; is an abbreviation for `(P â†’ Q) âˆ§ (Q â†’ P)`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L05_Associativity
msgid "Think carefully about what `Â«{h}Â»` proves and what proofs can be extracted from this."
msgstr ""

#: Game
msgid "FYS270"
msgstr ""

#: Game.Levels.ConjunctionWorld
msgid "Conjunction World"
msgstr ""

#: Game.Levels.ImplicationWorld.L06_ProvingAssumedImplication
msgid "There are two ways to prove that `P â†’ Q` under the assumption given below. Can you find them both?\n"
"\n"
"To delete a proof (or proof attempt) and start over, you might find it helpful to click on the button labelled `</>` in the upper right hand corner to enter `editor mode`. Then delete all the lines of your first proof (or proof attempt). Clicking on `>_` takes you back to `typewriter mode`.\n"
"\n"
"You can also delete a proof attempt in line by line in `typewriter mode` using the `retry` button to the right of that line."
msgstr ""

#: Game.Levels.ConjunctionWorld.L03_Symmetry
msgid "Given a hypothesis `h : P âˆ§ Q` for some propositions `P` and `Q`, `And.symm h` is a proof of `Q âˆ§ P`."
msgstr ""

#: Game.Levels.ImplicationWorld
msgid "We begin our study of propositional logic by introducing the logical connective *implication* denoted by `â†’`. For arbitrary *propositions* `P` and `Q`, `P â†’ Q` is a new proposition asserting that *if* `P` *is true then* `Q` *is true*.\n"
"\n"
"To understand how implications work in logic we must learn:\n"
"\n"
"* How to prove theorems of the form `P â†’ Q`.\n"
"* How to use a hypothesis of the form `P â†’ Q` to prove something else.\n"
"\n"
"We'll learn the rules for proving implications and using implications in the levels that follow."
msgstr ""

#: Game.Levels.ImplicationWorld.L09_BossLevel
msgid "Each world will end with a `Boss Level`, which is intended to be more challenging than the levels that came before. Have fun with this.\n"
"\n"
"To delete a proof (or proof attempt) and start over click on the button labelled `</>` in the upper right hand corner to enter `editor mode`. Then delete all the lines of your first proof (or proof attempt). Clicking on `>_` takes you back to `typewriter mode`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L01_IntroducingAnd
msgid "Use the tactic `constructor` to ask Lean to break up the goal into steps, of first proving `Â«{P}Â»` and then proving `Â«{Q}Â»`."
msgstr ""

#: Game.Levels.ImplicationWorld.L07_OnParentheses
#: Game.Levels.ImplicationWorld.L07_OnParentheses
#: Game.Levels.ImplicationWorld.L07_OnParentheses
msgid "As the goal is to prove an implication, the tactic `intro` can be used to introduce a hypothesis and update the goal. Before using this tactic, try to figure out which hypothesis will be assumed and what the goal will be, using the discussion about the implicit parenthesization above."
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed! ðŸŽ‰"
msgstr ""

#: Game.Levels.ConjunctionWorld.L03_Symmetry
msgid "In fact `P âˆ§ Q` is true if and only if `Q âˆ§ P` is true, as we will now demonstrate."
msgstr ""

#: Game.Levels.ConjunctionWorld.L09_UniversalProperty
msgid "Universal Property"
msgstr ""

#: Game.Levels.ConjunctionWorld.L01_IntroducingAnd
msgid "Now the goal is just to prove `P`. Type `exact Â«{p}Â»` to supply this proof."
msgstr ""

#: Game.Levels.ConjunctionWorld.L04_LogicalEquivalence
msgid "Two propositions `P` and `Q` are *logically equivalent* if `P` implies `Q` and `Q` also implies `P`. The assertion that `P` and `Q` are logically equivalent can be expressed by the compound proposition `(P â†’ Q) âˆ§ (Q â†’ P)`.\n"
"\n"
"Because this notion will appear frequently in what follows, we introduce `P â†” Q` as a useful shorthand for `(P â†’ Q) âˆ§ (Q â†’ P)`. See the list of definitions to the right for a reminder about what the symbol `â†”` means.\n"
"\n"
"The notion of logical equivalence enables us to upgrade our understanding of associativity of symmetry as follows."
msgstr ""

#: Game.Levels.ConjunctionWorld.L02_UsingAnd
msgid "Now the goal is just to prove `P`. Type `exact Â«{h}Â».1` to supply this proof."
msgstr ""

#: Game.Levels.ConjunctionWorld.L02_UsingAnd
msgid "Using And"
msgstr ""

#: Game.Levels.ConjunctionWorld.L09_UniversalProperty
msgid "The task in this level is to show another logical equivalence,\n"
"this time between the conjoined implications `(P â†’ Q) âˆ§ (P â†’ R)` and the implication `P â†’ Q âˆ§ R`.\n"
"\n"
"The proof will require a new idea, which previews the next level. We've seen that for propositions `S` and `T`,\n"
"`S â†’ (S â†’ T) â†’ T` can be proven by introducing hypotheses `s : S` and `h : S â†’ T`, at which point the goal is to prove `T`.\n"
"Then applying the hypothesis `h` reduces the goal to proving `S` which we know is true by `s`. In fact, the element\n"
"`h s : T` is a proof of `T`, namely the proof constructed by applying the hypothesis `h` to the hypothesis `s`."
msgstr ""

#: Game.Levels.ImplicationWorld.L06_ProvingAssumedImplication
msgid "Which tactics can be used to prove `Â«{P}Â» â†’ Â«{Q}Â»` with our given assumptions?"
msgstr ""

#: Game.Levels.ConjunctionWorld.L03_Symmetry
msgid "Symmetry"
msgstr ""

#: Game.Levels.ConjunctionWorld.L01_IntroducingAnd
msgid "Alternatively, you can type `exact âŸ¨p,qâŸ©' using '\\\\<' and '\\\\>' to type the angle braces."
msgstr ""

#: Game.Levels.ImplicationWorld.L01_ByAssumption
msgid "Our first mathematical theorem is about an arbitrary proposition `Â«{P}Â»` which can be any well-formed mathematical statement. The hypothesis `Â«{p}Â» : Â«{P}Â»`  can be thought of as providing a proof `Â«{p}Â»` that the proposition `Â«{P}Â»` is true. Our objective is to conclude that `Â«{P}Â»` is true, given this hypothesis. To use the hypothesis `Â«{p}Â»` to reach this conclusion type `exact Â«{p}Â»`."
msgstr ""

#: Game.Levels.ConjunctionWorld.L02_UsingAnd
msgid "Now Lean reminds you of the other goal, which is to prove `Q`. Type `exact Â«{h}Â».2` to supply this proof."
msgstr ""

#: Game.Levels.ConjunctionWorld.L03_Symmetry
msgid "In a compound proposition, the outermost logical connective (the one applied last in forming the proposition) often determines the overall proof strategy."
msgstr ""

#: Game.Levels.ConjunctionWorld.L02_UsingAnd
msgid "If this is your first time solving this level, delete your proof, and try to find another solution."
msgstr ""

#: Game.Levels.ConjunctionWorld.L04_LogicalEquivalence
msgid "Logical Equivalence"
msgstr ""

#: Game.Levels.ConjunctionWorld.L07_MoreCompoundImplication
msgid "More Compound Implication"
msgstr ""

#: Game.Levels.ImplicationWorld.L05_ProvingAssumption
msgid "Proving Assumption"
msgstr ""

#: Game.Levels.ImplicationWorld.L07_OnParentheses
msgid "Now you can start to apply some hypotheses to reduce the goal to one of your assumptions. Which tactic can be used here?"
msgstr ""

#: Game.Levels.ImplicationWorld.L01_ByAssumption
#: Game.Levels.ImplicationWorld.L02_ModusPonens
#: Game.Levels.ImplicationWorld.L03_ComposingImplication
msgid "Congratulations!"
msgstr ""

#: Game.Levels.ImplicationWorld.L04_ProvingImplication
#: Game.Levels.ImplicationWorld.L05_ProvingAssumption
#: Game.Levels.ImplicationWorld.L06_ProvingAssumedImplication
#: Game.Levels.ImplicationWorld.L07_OnParentheses
msgid "Let us now explore other implications that are provable with this strategy."
msgstr ""

#: Game.Levels.ImplicationWorld.L09_BossLevel
#: Game.Levels.ConjunctionWorld.L10_BossLevel
msgid "Boss Level"
msgstr ""

#: Game.Levels.ImplicationWorld.L08_ModusPonensAgain
msgid "Modus ponens tells us that under hypotheses `p : P` and `h : P â†’ Q` then `Q` is true. Can you see why the following theorem is another form of modus ponens?"
msgstr ""

#: Game
msgid "First Year Seminar 270"
msgstr ""
